LRTF(student[3],sort_long(),incomplete(),set_timer )
                 Student s
For i=0 to 3
get student id
While(incomplete(s))
Print=student id
Set_timer(s)
Student_time=student_time -1
Sort_long(s)
For i=0 to 3
Print=student id-complete time taken

Sort_long(student)
For i=0 to 3
For j=0  to 3-i
If s[i]<s[j]
{
swap
S[i] with s[j]
}
Else if(s[j].time=s[i].time)
{
Ifs[j].id>s[j+1].id
{
Swap s[i] with s[j]
}
}

Incomplete(student)
For i=0 to 3
If s[i].time!=0
Return true

Set_timer(student)
For i=0 to 3
If (s[i].time!=0)
{
S[i].completetime++
}
1.	Calculate complexity of implemented algorithm.
ANSWER: As we are performing for 3 students,worst  time and space complexity is O(9) ,therefore general worst case complexity is O(n2).
Where n is no. of students.

